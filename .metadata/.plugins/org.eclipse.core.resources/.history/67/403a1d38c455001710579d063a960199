  .global fibonacci
fibonacci:

check0:
    ;check to see if n is 0, if it is, don't push the return address onto the stack
    cmp r0, #0
    beq top
check1:
    ;check to see if n is 1, if it is, don't push the return address onto the stack
    cmp R0, #1
    beq top
save1:
    ;save the return address back to where we were in main onto the stack
    push {lr}
top:
    ;if n is 0, branch to lzero
    cmp r0, #0
    beq lzero
    ;if n is 1, branch to one
    cmp r0, #1
    beq one
    ;if n is not 0 or 1, go into the recursion part
    bgt recurse
lzero:
    ;push the value of 1 onto the stack and return
    mov r0, #1
    push {r0}
    mov pc, lr
one:
    ;push the value of 1 onto the stack and return
    mov r0, #1
    push {r0}
    mov pc, lr
recurse:
    push {r0}
    sub r0, r0, #1
    BL fibonacci

    mov r1, r0
    pop {r0}
    sub r0, r0, #1
    BL fibonacci

    add r0, r0, r1
    pop {r0}
    pop {lr}
    mov pc, lr
    ;get the value of fib(n-1)
    ;sub r0,r0, #1
    ;bl fibonacci
    ;;get the value of fib(n-2)
    ;sub r0, r0, #1
    ;bl fibonacci
    ;;get fib(n-1) and fib(n-2) off of the stack
    ;pop {r8}
    ;pop {r9}
    ;;add them together to get fib(n)
    ;add r0, r8, r9
    ;push {r0}
;exit:
    ;pop {r0}
    ;return
    ;pop {lr}
    ;mov pc, lr
